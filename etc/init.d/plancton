#!/bin/bash
#
# plancton      Starts and stops the plancton container spawner.
#
# chkconfig:    2345 99 09
# description:  Container spawner for a volounteer computing project.
#

### BEGIN INIT INFO
# Provides:          plancton
# Required-Start:
# Required-Stop:
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Starts and stops the plancton container spawner.
# Description:       Container spawner for a volounteer computing project.
### END INIT INFO

#
# Init
#

# Source function library
[[ -e /lib/lsb/init-functions ]] && . /lib/lsb/init-functions

# Get this script's name even calling this from a symlink.
Prog=`readlink -e "$0"`
cd `dirname "$Prog"`
Prog=`basename "$0"`

# Lock file name
LockDir='/var/lock/subsys'
LockFile="${LockDir}/plancton"

# Log files directory
planctonLogDir='/var/log/plancton'

# Log file
planctonLogFile="${planctonLogDir}/plancton.log"

# PID file
planctonPidFile='/var/run/plancton.pid'

# User
planctonUser='plancton'

#
# Echo functions
#

# check if a shell function exists: returns 0 if it does, 1 if it does not
function function_exists() (
   declare -fF "$1" > /dev/null 2>&1
   return $?
)

# echo at the beginning of an action
function echo_begin() (
   if function_exists 'log_begin_msg' ; then
      log_begin_msg "$1"
   else
      echo -n "${1}:"
   fi
   return 0
)

# echo on success at the end of an action
function echo_success() (
   if function_exists 'log_success_msg' ; then
      function_exists 'log_begin_msg' || echo -e -n '\r'
      log_success_msg "$1"
   else
      echo -e -n '\r'
      echo "${1}: OK"
   fi
   return 0
)

# echo on failure at the end of an action
function echo_failure() (
   if function_exists 'log_failure_msg' ; then
      function_exists 'log_begin_msg' || echo -e -n '\r'
      log_failure_msg "$1"
   else
      echo -e -n '\r'
      echo "${1}: FAILED"
   fi
   return 0
)

# automatically pick success/failure depending on the exit code
function echo_end() (
   if [[ $1 == 0 ]] ; then
      echo_success "$2"
   else
      echo_failure "$2"
   fi
)

#
# Functions
#

# Start plancton
function start() {
   local ret
   local lastMsg

   echo_begin "Starting ${Prog}"

   # Permissions for the log directory
   mkdir -p "$planctonLogDir"
   chmod -R u=rwX,g=,o= "$planctonLogDir"
   chown -R "$planctonUser" "$planctonLogDir"

   # Permissions for the PIDfile
   touch "$planctonPidFile"
   chmod 0700 "$planctonPidFile"
   chown "$planctonUser" "$planctonPidFile"

   # Finally start
   su "$planctonUser" -s /bin/sh -c 'exec planctonctl start' > /dev/null 2>&1

   lastMsg=`query_status`
   ret=$?

   if [[ $ret == 0 && -d "$LockDir" ]] ; then
      touch "$LockFile"
      chown "$planctonUser" "$LockFile"
   fi

   echo_end $ret "Starting ${Prog}: ${lastMsg}"

   return $ret
}

# Stop plancton
function stop() {
   local ret
   local lastMsg

   echo_begin "Stopping ${Prog}"
   sudo -u "$planctonUser" planctonctl stop > /dev/null 2>&1

   # note: query_status "fails" (1) if daemon is stoped: this is a success here
   lastMsg=`query_status`
   ret=$(( ! $? ))

   [[ $ret == 0 ]] && rm -f "$LockFile"

   echo_end $ret "Stopping ${Prog}: ${lastMsg}"

   return $ret
}

# Echo status
function status() {
   local ret
   local lastMsg

   lastMsg=`query_status`
   ret=$?

   if [[ $ret == 0 ]] ; then
      echo_success "$lastMsg"
   else
      echo_failure "$lastMsg"
   fi

   return $ret
}

# Query status: echoes a message and returns 0 if running, nonzero if not
function query_status() {
   local ret
   su "$planctonUser" -s /bin/sh -c 'exec planctonctl status' > /dev/null 2>&1
   ret=$?
   if [[ $ret == 0 ]] ; then
      echo "${Prog} running with PID $(cat "$planctonPidFile")"
   else
      echo "${Prog} not running"
   fi
   return $ret
}

# Print configuration
function print_conf() {
   echo "Python     : $( which python ) ($( python --version 2>&1 ))"
   echo "PYTHONPATH : ${PYTHONPATH}"
}

# Entry point
case "$1" in

   start)
      start
      exit $?
   ;;

   stop)
      stop
      exit $?
   ;;

   status)
      status
      exit $?
   ;;

   restart)
      stop && start
      exit $?
   ;;

   log)
      status
      [[ -e "$planctonLogFile" ]] && tail -f "$planctonLogFile"
      exit $?
   ;;

   conf)
      print_conf
      exit $?
   ;;

   *)
      echo "Usage: $Prog [start|stop|status|restart|log|conf]"
      exit 1
   ;;

esac
